<?php

namespace app\models;

use Yii;
use app\models\traits\GeneralTraits;

/**
 * This is the model class for table "{{%template_setup}}".
 *
 * @property integer $id
 * @property integer $template_id
 * @property integer $telecast_id
 * @property integer $genre_id
 * @property integer $speech_id
 * @property integer $code_id
 * @property string $comment
 * @property string $time_s
 * @property string $time_e
 * @property integer $sum
 * @property integer $kanal
 * @property integer $micf
 * @property integer $role
 *
 * @property Template $template
 * @property Telecast $telecast
 * @property Genre $genre
 * @property Code $code
 * @property Speech $speech
 */
class TemplateSetup extends \yii\db\ActiveRecord
{
    use GeneralTraits;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%template_setup}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['template_id', 'telecast_id', 'genre_id', 'speech_id', 'code_id', 'time_s', 'time_e', 'kanal'], 'required'],
            [['template_id', 'telecast_id', 'genre_id', 'speech_id', 'code_id', 'sum', 'kanal', 'micf', 'role'], 'integer'],
            [['comment'], 'string'],
            [['time_s', 'time_e'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'template_id' => Yii::t('app', 'Template ID'),
            'telecast_id' => Yii::t('app', 'Telecast ID'),
            'genre_id' => Yii::t('app', 'Genre ID'),
            'speech_id' => Yii::t('app', 'Speech ID'),
            'code_id' => Yii::t('app', 'Code ID'),
            'comment' => Yii::t('app', 'Comment'),
            'time_s' => Yii::t('app', 'Time S'),
            'time_e' => Yii::t('app', 'Time E'),
            'sum' => Yii::t('app', 'Sum'),
            'kanal' => Yii::t('app', 'Kanal'),
            'micf' => Yii::t('app', 'Micf'),
            'role' => Yii::t('app', 'Role'),
        ];
    }

    /**
     * @inheritdoc
     * @return TemplateSetupQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new TemplateSetupQuery(get_called_class());
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGenre()
    {
        return $this->hasOne(Genre::className(), ['id' => 'genre_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCode()
    {
        return $this->hasOne(Code::className(), ['id' => 'code_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTemplate()
    {
        return $this->hasOne(Template::className(), ['id' => 'template_id']);
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTelecast()
    {
        return $this->hasOne(Telecast::className(), ['id' => 'telecast_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSpeech()
    {
        return $this->hasOne(Speech::className(), ['id' => 'speech_id']);
    }

    /**
     * @return array
     */
    public function sumAll()
    {
        $query = self::find()->role();

        // add conditions that should always apply here

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'template_id' => $this->template_id,
            'telecast_id' => $this->telecast_id,
            'genre_id' => $this->genre_id,
            'speech_id' => $this->speech_id,
            'code_id' => $this->code_id,
            'sum' => $this->sum,
            'kanal' => $this->kanal,
            'micf' => $this->micf,
        ]);

        $query->andFilterWhere(['like', 'time_s', $this->time_s])
            ->andFilterWhere(['like', 'time_e', $this->time_e])
            ->andFilterWhere(['like', 'comment', $this->comment]);

        $allSum = $query->sum('sum');

        $speech = Speech::find()->andFilterWhere(['like', 'name', 'Власне'])->role()->one();

        $query->andFilterWhere(['speech_id' => $speech->id]);

        $secondSum = $query->sum('sum');

        return ['allSum' => $allSum ? $allSum : 0, 'secondSum' => $secondSum ? $secondSum : 0];
    }

    public function beforeSave($insert)
    {
        $timeStart = new \DateTime($this->time_s);
        $timeEnd = new \DateTime($this->time_e);
        $diffTime = $timeEnd->diff($timeStart);
        $this->sum = $diffTime->i + ($diffTime->h * 60);

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
